/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simplePong;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Timer;

/**
 *
 * @author Peter Heusch
 */
public class SimplePanel extends javax.swing.JPanel implements KeyListener {

    public final static int LINEGAP = 4;
    public final static float PI = (float) Math.PI;

    private float scale;
    private float translate;
    private Rectangle drawRect;
    private SimpleEngine engine;
    public int id;
    private BufferedImage image;

    /**
     * Creates new form MasterPanel
     */
    public SimplePanel() {
        initComponents();
        try {
            image = ImageIO.read(getClass().getResourceAsStream("/heart2.png"));
        } catch (IOException ex) {
            Logger.getLogger(SimplePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        engine = new SimpleEngine();
        Timer t = new Timer(5, (evt) -> {
            engine.step(id);
            repaint();
        });
        t.start();
        setFocusable(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
    }//GEN-LAST:event_formMouseMoved

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
    }//GEN-LAST:event_formComponentResized

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    }//GEN-LAST:event_formKeyPressed

    private void initScaling() {
    }

    @Override
    public void paintComponent(Graphics gc) {
        super.paintComponent(gc);
        Graphics2D g2d = (Graphics2D) gc;
        Rectangle rcBounds = this.getBounds();
        Polygon poly = engine.getPolygon();
        Point[] racket = engine.getRacket();

        //draw poly
        g2d.setStroke(new BasicStroke(4.5f));
        g2d.setColor(new Color(169, 169, 169));
        g2d.fill(poly);
        g2d.draw(poly);

        //draw Puck
        g2d.setColor(Color.WHITE);
        Ellipse2D.Double circle = new Ellipse2D.Double(engine.getPuck().x, engine.getPuck().y, SimpleEngine.BALLSIZE, SimpleEngine.BALLSIZE);
        g2d.fill(circle);

        //draw Racket
        g2d.setColor(Color.BLACK);
        g2d.setStroke(new BasicStroke(4.5f));
        g2d.drawLine(racket[0].x, racket[0].y, racket[racket.length - 1].x, racket[racket.length - 1].y);

        //draw Lifes
        String lifes = "Lifes: ";
        g2d.drawString(lifes, rcBounds.width - 80, 30);
        for (int i = 0; i < engine.leben; i++) {
            g2d.drawImage(image, rcBounds.width - (50 - 15 * i), 17, 15, 15, null);
        }

    }

    @Override
    public void keyTyped(KeyEvent ke) {
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        id = ke.getKeyCode();
        engine.step(id);
        this.repaint();
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        id = 0;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
